funcion para calculo de r(t+h),

h no muy pequeño para empezar
fichero txt posiciones(x, y)
paso 1: aceleraciones con newton
paso 2: posiciones con verlet(posiciones  velocidades perpendiculares), datos en internet sobre velocidades iniciales
funcion intermedia
paso 3 aceleraciones nuevas (tres funciones, a, r, v)
paso 4 v
paso 5 ciclo

reescalamiento, para plots deshacer cambio de variables
no hace falta simular el Sol(centro en cero), pero sí plutón

1 simulacion t
2 calculamos periodos (fichero, unidades SI
contador cruce y = 0 (1 vez medio periodo)
Estimación T1 = (t1-t0)*2 T2= (t2-t0) y media
3 conservacion de la energia, momento angular (calcularlo pronto para ver si se ha roto, los planetas no aceleran)
4 Heliocentrico --> Geocentrico (orbitas espirales como bobinas)
r --> r - r tierra

comprobacion con deltaL=0, deltaE=0
e(t) = T(t) + V(t)


CONSEJOS:

1.- Funciones (v, h) --- v+h (vectores)
2.- Funcion para fuerza, potencial y cinetica
3.- Funcion energía conservada
4.- Cambios de variable r-> r'y otra de r' --> r
5.- Simulador 3-4 planetas


Funciones, 4-5 planetas en portatil, 9 planetas en proteus
empezar con h= 1/100 o 1/1000

PROBLEMAS COMUNES:

orbitas abiertas (poco tiempo simulacion o mucha precision) -->tambien menos planetas
videos como la madre de jesus --> reducir precision o coger menos puntos para graficar (solo pares ej)



pseudorandom number generator



pintar un planeta y el sol y ver si aceleracion constante
si se mantiene constante depurar la velocidad


/*void motion(long double *rx, long double *ry, long double *ax, long double *ay, long double *m, int filas, int columnas)
{
    long double aux;

    for (int i = 1; i < filas; i++)
    {
        for (int j = 0; j < filas; j++)
        {
            if (i != j)
            {
                aux = sqrt(pow(rx[i] - rx[j], 2) + pow(ry[i] - ry[j], 2));
                ax[i] += -m[j] * (rx[i] - rx[j]) / pow(aux, 3);
                ay[i] += -m[j] * (ry[i] - ry[j]) / pow(aux, 3);
            }
        }
    }
}

//Algoritmo de Verlet

void verlet(long double *rx, long double *ry, long double *vx, long double *vy, long double *ax, long double *ay, long double *m, long double h, int filas, int columnas)
{
    long double wx[filas], wy[filas];

    motion(rx, ry, ax, ay, m, filas, columnas);

    for (int i = 1; i < filas; i++)
    {
        rx[i] += vx[i] * h + 0.5 * ax[i] * h * h;
        ry[i] += vy[i] * h + 0.5 * ay[i] * h * h;
    }
    
    for (int i = 1; i < filas; i++)
    {
        wx[i] =  vx[i] + 0.5 * h * ax[i];
        wy[i] =  vy[i] + 0.5 * h * ay[i];
    }

    motion(rx, ry, ax, ay, m, filas, columnas);

    for (int i = 1; i < filas; i++)
    {
        vx[i] = wx[i] + 0.5 * ax[i]* h; //Si llamo a motion tres veces y resto hago como q la velocidad varia pero no
        vy[i] = wy[i] + 0.5 * ay[i]* h;
    }
            
}*/

Plotear tiempo pc y tiempo JOEL